package fptcloud_mfke

var descriptions = map[string]string{
	"vpc_id":          "VPC ID",
	"cluster_name":    "Cluster name",
	"k8s_version":     "Kubernetes version",
	"purpose":         "Cluster purpose",
	"pod_network":     "Pod network (subnet ID)",
	"pod_prefix":      "Pod network (prefix)",
	"service_network": "Service network (subnet ID)",
	"service_prefix":  "Service prefix (prefix)",

	"k8s_max_pod": "Max pods per node",

	"name":                  "Pool name",
	"storage_profile":       "Pool storage profile",
	"worker_type":           "Worker flavor ID",
	"network_name":          "Subnet name",
	"network_id":            "Subnet ID",
	"network_overlay":       "Whether to encapsulate pod traffic between different subnets or same subnet",
	"edge_gateway_id":       "Edge gateway ID, in the format of urn:vcloud:gateway:<uuid>",
	"worker_disk_size":      "Worker disk size",
	"scale_min":             "Minimum number of nodes for autoscaling",
	"scale_max":             "Maximum number of nodes for autoscaling",
	"auto_scale":            "Whether to enable autoscaling",
	"is_enable_auto_repair": "Whether to enable auto-repair",
	// New/optional fields
	"tags":                     "Tags for the worker pool (optional)",
	"kv":                       "Label for the pool (optional)",
	"vgpu_id":                  "Virtual GPU ID (optional)",
	"max_client":               "Maximum number of clients (optional)",
	"gpu_sharing_client":       "GPU sharing client (optional)",
	"driver_installation_type": "Driver installation type (optional)",
	"internal_subnet_lb":       "Internal subnet for load balancer (optional)",
	"edge_gateway_name":        "Edge gateway name (optional)",
	"allowCidr":                "Allowed CIDR blocks for cluster endpoint access (optional)",
	"is_enable_auto_upgrade":   "Whether to enable auto-upgrade (optional)",
	"auto_upgrade_expression":  "Auto-upgrade cron expressions (optional)",
	"auto_upgrade_timezone":    "Timezone for auto-upgrade (optional)",
	"cluster_autoscaler":       "Cluster autoscaler configuration block (optional)",
	"is_running":               "Whether the cluster is running (optional)",
	// cluster_autoscaler subfields
	"is_enable_auto_scaling":           "Enable cluster autoscaling (optional)",
	"scale_down_delay_after_add":       "Delay after adding a node before scale down (seconds, optional)",
	"scale_down_delay_after_delete":    "Delay after deleting a node before scale down (seconds, optional)",
	"scale_down_delay_after_failure":   "Delay after scale down failure (seconds, optional)",
	"scale_down_unneeded_time":         "Time a node should be unneeded before scale down (seconds, optional)",
	"scale_down_utilization_threshold": "Utilization threshold for scale down (optional)",
	"scan_interval":                    "Interval between autoscaler scans (seconds, optional)",
	"expander":                         "Autoscaler expander strategy (optional)",
	// cluster_endpoint_access subfields
	"cluster_endpoint_access_type":       "Type of cluster endpoint access (public, private, or mixed)",
	"cluster_endpoint_access_allow_cidr": "Allowed CIDR blocks for cluster endpoint access",
	// hibernation schedules
	"hibernation_schedules": "List of hibernation schedules for the cluster",
	"start":                 "Cron expression for when hibernation should start",
	"end":                   "Cron expression for when hibernation should end",
	"location":              "Timezone for the hibernation schedule (e.g., Asia/Bangkok)",
}
